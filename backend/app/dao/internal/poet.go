// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// PoetDao is the manager for logic model data accessing and custom defined data operations functions management.
type PoetDao struct {
	Table   string          // Table is the underlying table name of the DAO.
	Group   string          // Group is the database configuration group name of current DAO.
	Columns PoetColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// PoetColumns defines and stores column names for table poet.
type PoetColumns struct {
	Id         string //   
    Name       string //   
    Profile    string //   
    DynastyId  string //
}

//  poetColumns holds the columns for table poet.
var poetColumns = PoetColumns{
	Id:        "id",          
            Name:      "name",        
            Profile:   "profile",     
            DynastyId: "dynasty_id",
}

// NewPoetDao creates and returns a new DAO object for table data access.
func NewPoetDao() *PoetDao {
	return &PoetDao{
		Group:   "default",
		Table:   "poet",
		Columns: poetColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *PoetDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *PoetDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *PoetDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}